esphome:
  name: $device_name
  platform: ESP32
  board: esp32dev

wifi:
  ssid: "Kerberos"
  password: !secret wifi_password

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  - platform: esphome
    password: !secret ota_password

font:
  - file: "DejaVuSans.ttf"
    id: deja_vu
    size: 18
    glyphs: '!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÄÜÖ abcdefghijklmnopqrstuvwxyzäüöß'
  - file: "DejaVuSans.ttf"
    id: deja_vu_big
    size: 32

image:
  - file: mdi:solar-power
    id: image_to_grid
    resize: 16x16
  - file: mdi:transmission-tower
    id: image_from_grid
    resize: 16x16
  - file: mdi:window-closed
    id: image_window
    resize: 16x16
  - file: mdi:battery-charging
    id: image_battery_charge
    resize: 16x16
  - file: mdi:battery-outline
    id: image_battery_discharge
    resize: 16x16

i2c:
  sda: GPIO33
  scl: GPIO32

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    rotation: 0°
    address: 0x3C
    lambda: |-
      it.strftime(64, 0, id(deja_vu_big), TextAlign::TOP_CENTER, "%H:%M", id(ha_time).now());

      if (id(message).state.empty()) {
        it.printf(0, 64, id(deja_vu), TextAlign::BOTTOM_LEFT,"%.1f°C", id(temperature).state);
        it.printf(128, 64, id(deja_vu), TextAlign::BOTTOM_RIGHT,"%.0f%%", id(humidity).state);
      } else {
        it.printf(64, 64, id(deja_vu), TextAlign::BOTTOM_CENTER, "%s", id(message).state.c_str());
      }

      if (id(window_open).state) {
        it.image(0, 0, id(image_window), ImageAlign::TOP_LEFT);
      }

      if(!isnan(id(home_power).state)) {
        if (id(home_power).state >= 100) {
          it.image(128, 0, id(image_from_grid), ImageAlign::TOP_RIGHT);
        } else if (id(home_power).state <= -100) {
          it.image(128, 0, id(image_to_grid), ImageAlign::TOP_RIGHT);
        } else if (id(battery_power).state <= -100) {
          it.image(128, 0, id(image_battery_discharge), ImageAlign::TOP_RIGHT);
        } else if (id(battery_power).state >= 100) {
          it.image(128, 0, id(image_battery_charge), ImageAlign::TOP_RIGHT);
        }
      }

sensor:
  - platform: bme280_i2c
    temperature:
      id: temperature
      name: ${room_name} Temperatur
      filters:
      - offset: -1
    pressure:
      id: pressure
      name: ${room_name} Luftdruck
    humidity:
      id: humidity
      name: ${room_name} Luftfeuchte
    address: 0x76
    update_interval: 60s
  - platform: homeassistant
    id: home_power
    entity_id: sensor.${home_power_sensor}
  - platform: homeassistant
    id: battery_power
    entity_id: sensor.${battery_power_sensor}

binary_sensor:
  - platform: homeassistant
    id: window_open
    entity_id: binary_sensor.${window_open_sensor}

time:
  - platform: homeassistant
    id: ha_time
    timezone: Europe/Berlin

text:
  - id: message
    name: ${room_name} Nachricht
    platform: template
    optimistic: true
    max_length: 32
    mode: text
    initial_value: ""
    set_action:
      then:
        - if:
            condition:
              lambda: 'return !x.empty();'
            then:
              - script.execute: clear_message

script:
  - id: clear_message
    mode: "restart"
    then:
      - delay: 60s
      - text.set:
          id: message
          value: ""
